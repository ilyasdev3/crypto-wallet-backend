/* tslint:disable */
/* eslint-disable */

// ######################################## THIS FILE WAS GENERATED BY MONGOOSE-TSGEN ######################################## //

// NOTE: ANY CHANGES MADE WILL BE OVERWRITTEN ON SUBSEQUENT EXECUTIONS OF MONGOOSE-TSGEN.

import mongoose from "mongoose";

/**
 * Lean version of CommentDocument
 *
 * This has all Mongoose getters & functions removed. This type will be returned from `CommentDocument.toObject()`. To avoid conflicts with model names, use the type alias `CommentObject`.
 * ```
 * const commentObject = comment.toObject();
 * ```
 */
export type Comment = {
  user: User["_id"] | User;
  postId: Post["_id"] | Post;
  content: string;
  createdAt?: Date;
  updatedAt?: Date;
  _id: mongoose.Types.ObjectId;
};

/**
 * Lean version of CommentDocument (type alias of `Comment`)
 *
 * Use this type alias to avoid conflicts with model names:
 * ```
 * import { Comment } from "../models"
 * import { CommentObject } from "../interfaces/mongoose.gen.ts"
 *
 * const commentObject: CommentObject = comment.toObject();
 * ```
 */
export type CommentObject = Comment;

/**
 * Mongoose Query type
 *
 * This type is returned from query functions. For most use cases, you should not need to use this type explicitly.
 */
export type CommentQuery = mongoose.Query<
  any,
  CommentDocument,
  CommentQueries
> &
  CommentQueries;

/**
 * Mongoose Query helper types
 *
 * This type represents `CommentSchema.query`. For most use cases, you should not need to use this type explicitly.
 */
export type CommentQueries = {};

export type CommentMethods = {};

export type CommentStatics = {};

/**
 * Mongoose Model type
 *
 * Pass this type to the Mongoose Model constructor:
 * ```
 * const Comment = mongoose.model<CommentDocument, CommentModel>("Comment", CommentSchema);
 * ```
 */
export type CommentModel = mongoose.Model<CommentDocument, CommentQueries> &
  CommentStatics;

/**
 * Mongoose Schema type
 *
 * Assign this type to new Comment schema instances:
 * ```
 * const CommentSchema: CommentSchema = new mongoose.Schema({ ... })
 * ```
 */
export type CommentSchema = mongoose.Schema<
  CommentDocument,
  CommentModel,
  CommentMethods,
  CommentQueries
>;

/**
 * Mongoose Document type
 *
 * Pass this type to the Mongoose Model constructor:
 * ```
 * const Comment = mongoose.model<CommentDocument, CommentModel>("Comment", CommentSchema);
 * ```
 */
export type CommentDocument = mongoose.Document<
  mongoose.Types.ObjectId,
  CommentQueries
> &
  CommentMethods & {
    user: UserDocument["_id"] | UserDocument;
    postId: PostDocument["_id"] | PostDocument;
    content: string;
    createdAt?: Date;
    updatedAt?: Date;
    _id: mongoose.Types.ObjectId;
  };

/**
 * Lean version of CommunityDocument
 *
 * This has all Mongoose getters & functions removed. This type will be returned from `CommunityDocument.toObject()`. To avoid conflicts with model names, use the type alias `CommunityObject`.
 * ```
 * const communityObject = community.toObject();
 * ```
 */
export type Community = {
  name: string;
  description?: string;
  isVerified: boolean;
  userId: User["_id"] | User;
  profileImage?: string;
  coverImaage?: string;
  createdAt?: Date;
  updatedAt?: Date;
  _id: mongoose.Types.ObjectId;
};

/**
 * Lean version of CommunityDocument (type alias of `Community`)
 *
 * Use this type alias to avoid conflicts with model names:
 * ```
 * import { Community } from "../models"
 * import { CommunityObject } from "../interfaces/mongoose.gen.ts"
 *
 * const communityObject: CommunityObject = community.toObject();
 * ```
 */
export type CommunityObject = Community;

/**
 * Mongoose Query type
 *
 * This type is returned from query functions. For most use cases, you should not need to use this type explicitly.
 */
export type CommunityQuery = mongoose.Query<
  any,
  CommunityDocument,
  CommunityQueries
> &
  CommunityQueries;

/**
 * Mongoose Query helper types
 *
 * This type represents `CommunitySchema.query`. For most use cases, you should not need to use this type explicitly.
 */
export type CommunityQueries = {};

export type CommunityMethods = {};

export type CommunityStatics = {};

/**
 * Mongoose Model type
 *
 * Pass this type to the Mongoose Model constructor:
 * ```
 * const Community = mongoose.model<CommunityDocument, CommunityModel>("Community", CommunitySchema);
 * ```
 */
export type CommunityModel = mongoose.Model<
  CommunityDocument,
  CommunityQueries
> &
  CommunityStatics;

/**
 * Mongoose Schema type
 *
 * Assign this type to new Community schema instances:
 * ```
 * const CommunitySchema: CommunitySchema = new mongoose.Schema({ ... })
 * ```
 */
export type CommunitySchema = mongoose.Schema<
  CommunityDocument,
  CommunityModel,
  CommunityMethods,
  CommunityQueries
>;

/**
 * Mongoose Document type
 *
 * Pass this type to the Mongoose Model constructor:
 * ```
 * const Community = mongoose.model<CommunityDocument, CommunityModel>("Community", CommunitySchema);
 * ```
 */
export type CommunityDocument = mongoose.Document<
  mongoose.Types.ObjectId,
  CommunityQueries
> &
  CommunityMethods & {
    name: string;
    description?: string;
    isVerified: boolean;
    userId: UserDocument["_id"] | UserDocument;
    profileImage?: string;
    coverImaage?: string;
    createdAt?: Date;
    updatedAt?: Date;
    _id: mongoose.Types.ObjectId;
  };

/**
 * Lean version of ContractDocument
 *
 * This has all Mongoose getters & functions removed. This type will be returned from `ContractDocument.toObject()`. To avoid conflicts with model names, use the type alias `ContractObject`.
 * ```
 * const contractObject = contract.toObject();
 * ```
 */
export type Contract = {
  name: string;
  contractAddress: string;
  provider: string;
  abi?: string;
  network: string;
  userId: User["_id"] | User;
  createdAt?: Date;
  updatedAt?: Date;
  _id: mongoose.Types.ObjectId;
};

/**
 * Lean version of ContractDocument (type alias of `Contract`)
 *
 * Use this type alias to avoid conflicts with model names:
 * ```
 * import { Contract } from "../models"
 * import { ContractObject } from "../interfaces/mongoose.gen.ts"
 *
 * const contractObject: ContractObject = contract.toObject();
 * ```
 */
export type ContractObject = Contract;

/**
 * Mongoose Query type
 *
 * This type is returned from query functions. For most use cases, you should not need to use this type explicitly.
 */
export type ContractQuery = mongoose.Query<
  any,
  ContractDocument,
  ContractQueries
> &
  ContractQueries;

/**
 * Mongoose Query helper types
 *
 * This type represents `ContractSchema.query`. For most use cases, you should not need to use this type explicitly.
 */
export type ContractQueries = {};

export type ContractMethods = {};

export type ContractStatics = {};

/**
 * Mongoose Model type
 *
 * Pass this type to the Mongoose Model constructor:
 * ```
 * const Contract = mongoose.model<ContractDocument, ContractModel>("Contract", ContractSchema);
 * ```
 */
export type ContractModel = mongoose.Model<ContractDocument, ContractQueries> &
  ContractStatics;

/**
 * Mongoose Schema type
 *
 * Assign this type to new Contract schema instances:
 * ```
 * const ContractSchema: ContractSchema = new mongoose.Schema({ ... })
 * ```
 */
export type ContractSchema = mongoose.Schema<
  ContractDocument,
  ContractModel,
  ContractMethods,
  ContractQueries
>;

/**
 * Mongoose Document type
 *
 * Pass this type to the Mongoose Model constructor:
 * ```
 * const Contract = mongoose.model<ContractDocument, ContractModel>("Contract", ContractSchema);
 * ```
 */
export type ContractDocument = mongoose.Document<
  mongoose.Types.ObjectId,
  ContractQueries
> &
  ContractMethods & {
    name: string;
    contractAddress: string;
    provider: string;
    abi?: string;
    network: string;
    userId: UserDocument["_id"] | UserDocument;
    createdAt?: Date;
    updatedAt?: Date;
    _id: mongoose.Types.ObjectId;
  };

/**
 * Lean version of NotificationDocument
 *
 * This has all Mongoose getters & functions removed. This type will be returned from `NotificationDocument.toObject()`. To avoid conflicts with model names, use the type alias `NotificationObject`.
 * ```
 * const notificationObject = notification.toObject();
 * ```
 */
export type Notification = {
  userId: User["_id"] | User;
  title: string;
  message: string;
  type: "like" | "follow" | "comment" | "share" | "post" | "wallet";
  status: "unread" | "read" | "archived";
  data?: any;
  url?: string;
  createdAt?: Date;
  updatedAt?: Date;
  _id: mongoose.Types.ObjectId;
};

/**
 * Lean version of NotificationDocument (type alias of `Notification`)
 *
 * Use this type alias to avoid conflicts with model names:
 * ```
 * import { Notification } from "../models"
 * import { NotificationObject } from "../interfaces/mongoose.gen.ts"
 *
 * const notificationObject: NotificationObject = notification.toObject();
 * ```
 */
export type NotificationObject = Notification;

/**
 * Mongoose Query type
 *
 * This type is returned from query functions. For most use cases, you should not need to use this type explicitly.
 */
export type NotificationQuery = mongoose.Query<
  any,
  NotificationDocument,
  NotificationQueries
> &
  NotificationQueries;

/**
 * Mongoose Query helper types
 *
 * This type represents `NotificationSchema.query`. For most use cases, you should not need to use this type explicitly.
 */
export type NotificationQueries = {};

export type NotificationMethods = {};

export type NotificationStatics = {};

/**
 * Mongoose Model type
 *
 * Pass this type to the Mongoose Model constructor:
 * ```
 * const Notification = mongoose.model<NotificationDocument, NotificationModel>("Notification", NotificationSchema);
 * ```
 */
export type NotificationModel = mongoose.Model<
  NotificationDocument,
  NotificationQueries
> &
  NotificationStatics;

/**
 * Mongoose Schema type
 *
 * Assign this type to new Notification schema instances:
 * ```
 * const NotificationSchema: NotificationSchema = new mongoose.Schema({ ... })
 * ```
 */
export type NotificationSchema = mongoose.Schema<
  NotificationDocument,
  NotificationModel,
  NotificationMethods,
  NotificationQueries
>;

/**
 * Mongoose Document type
 *
 * Pass this type to the Mongoose Model constructor:
 * ```
 * const Notification = mongoose.model<NotificationDocument, NotificationModel>("Notification", NotificationSchema);
 * ```
 */
export type NotificationDocument = mongoose.Document<
  mongoose.Types.ObjectId,
  NotificationQueries
> &
  NotificationMethods & {
    userId: UserDocument["_id"] | UserDocument;
    title: string;
    message: string;
    type: "like" | "follow" | "comment" | "share" | "post" | "wallet";
    status: "unread" | "read" | "archived";
    data?: any;
    url?: string;
    createdAt?: Date;
    updatedAt?: Date;
    _id: mongoose.Types.ObjectId;
  };

/**
 * Lean version of PostStatDocument
 *
 * This has all Mongoose getters & functions removed. This type will be returned from `PostDocument.toObject()`.
 * ```
 * const postObject = post.toObject();
 * ```
 */
export type PostStat = {
  totalLikes?: number;
  totalComments?: number;
  totalShares?: number;
  _id: mongoose.Types.ObjectId;
};

/**
 * Lean version of PostDocument
 *
 * This has all Mongoose getters & functions removed. This type will be returned from `PostDocument.toObject()`. To avoid conflicts with model names, use the type alias `PostObject`.
 * ```
 * const postObject = post.toObject();
 * ```
 */
export type Post = {
  title: string;
  content: string;
  isVerified: boolean;
  communityId?: Community["_id"] | Community;
  image?: string;
  publicId?: string;
  stats?: PostStat;
  likes: (User["_id"] | User)[];
  userId: User["_id"] | User;
  createdAt?: Date;
  updatedAt?: Date;
  _id: mongoose.Types.ObjectId;
};

/**
 * Lean version of PostDocument (type alias of `Post`)
 *
 * Use this type alias to avoid conflicts with model names:
 * ```
 * import { Post } from "../models"
 * import { PostObject } from "../interfaces/mongoose.gen.ts"
 *
 * const postObject: PostObject = post.toObject();
 * ```
 */
export type PostObject = Post;

/**
 * Mongoose Query type
 *
 * This type is returned from query functions. For most use cases, you should not need to use this type explicitly.
 */
export type PostQuery = mongoose.Query<any, PostDocument, PostQueries> &
  PostQueries;

/**
 * Mongoose Query helper types
 *
 * This type represents `PostSchema.query`. For most use cases, you should not need to use this type explicitly.
 */
export type PostQueries = {};

export type PostMethods = {};

export type PostStatics = {};

/**
 * Mongoose Model type
 *
 * Pass this type to the Mongoose Model constructor:
 * ```
 * const Post = mongoose.model<PostDocument, PostModel>("Post", PostSchema);
 * ```
 */
export type PostModel = mongoose.Model<PostDocument, PostQueries> & PostStatics;

/**
 * Mongoose Schema type
 *
 * Assign this type to new Post schema instances:
 * ```
 * const PostSchema: PostSchema = new mongoose.Schema({ ... })
 * ```
 */
export type PostSchema = mongoose.Schema<
  PostDocument,
  PostModel,
  PostMethods,
  PostQueries
>;

/**
 * Mongoose Document type
 *
 * Pass this type to the Mongoose Model constructor:
 * ```
 * const Post = mongoose.model<PostDocument, PostModel>("Post", PostSchema);
 * ```
 */
export type PostStatDocument = mongoose.Document<mongoose.Types.ObjectId> & {
  totalLikes?: number;
  totalComments?: number;
  totalShares?: number;
  _id: mongoose.Types.ObjectId;
};

/**
 * Mongoose Document type
 *
 * Pass this type to the Mongoose Model constructor:
 * ```
 * const Post = mongoose.model<PostDocument, PostModel>("Post", PostSchema);
 * ```
 */
export type PostDocument = mongoose.Document<
  mongoose.Types.ObjectId,
  PostQueries
> &
  PostMethods & {
    title: string;
    content: string;
    isVerified: boolean;
    communityId?: CommunityDocument["_id"] | CommunityDocument;
    image?: string;
    publicId?: string;
    stats?: PostStatDocument;
    likes: mongoose.Types.Array<UserDocument["_id"] | UserDocument>;
    userId: UserDocument["_id"] | UserDocument;
    createdAt?: Date;
    updatedAt?: Date;
    _id: mongoose.Types.ObjectId;
  };

/**
 * Lean version of ShareDocument
 *
 * This has all Mongoose getters & functions removed. This type will be returned from `ShareDocument.toObject()`. To avoid conflicts with model names, use the type alias `ShareObject`.
 * ```
 * const shareObject = share.toObject();
 * ```
 */
export type Share = {
  userId: User["_id"] | User;
  postId: Post["_id"] | Post;
  createdAt?: Date;
  updatedAt?: Date;
  _id: mongoose.Types.ObjectId;
};

/**
 * Lean version of ShareDocument (type alias of `Share`)
 *
 * Use this type alias to avoid conflicts with model names:
 * ```
 * import { Share } from "../models"
 * import { ShareObject } from "../interfaces/mongoose.gen.ts"
 *
 * const shareObject: ShareObject = share.toObject();
 * ```
 */
export type ShareObject = Share;

/**
 * Mongoose Query type
 *
 * This type is returned from query functions. For most use cases, you should not need to use this type explicitly.
 */
export type ShareQuery = mongoose.Query<any, ShareDocument, ShareQueries> &
  ShareQueries;

/**
 * Mongoose Query helper types
 *
 * This type represents `ShareSchema.query`. For most use cases, you should not need to use this type explicitly.
 */
export type ShareQueries = {};

export type ShareMethods = {};

export type ShareStatics = {};

/**
 * Mongoose Model type
 *
 * Pass this type to the Mongoose Model constructor:
 * ```
 * const Share = mongoose.model<ShareDocument, ShareModel>("Share", ShareSchema);
 * ```
 */
export type ShareModel = mongoose.Model<ShareDocument, ShareQueries> &
  ShareStatics;

/**
 * Mongoose Schema type
 *
 * Assign this type to new Share schema instances:
 * ```
 * const ShareSchema: ShareSchema = new mongoose.Schema({ ... })
 * ```
 */
export type ShareSchema = mongoose.Schema<
  ShareDocument,
  ShareModel,
  ShareMethods,
  ShareQueries
>;

/**
 * Mongoose Document type
 *
 * Pass this type to the Mongoose Model constructor:
 * ```
 * const Share = mongoose.model<ShareDocument, ShareModel>("Share", ShareSchema);
 * ```
 */
export type ShareDocument = mongoose.Document<
  mongoose.Types.ObjectId,
  ShareQueries
> &
  ShareMethods & {
    userId: UserDocument["_id"] | UserDocument;
    postId: PostDocument["_id"] | PostDocument;
    createdAt?: Date;
    updatedAt?: Date;
    _id: mongoose.Types.ObjectId;
  };

/**
 * Lean version of TransactionDocument
 *
 * This has all Mongoose getters & functions removed. This type will be returned from `TransactionDocument.toObject()`. To avoid conflicts with model names, use the type alias `TransactionObject`.
 * ```
 * const transactionObject = transaction.toObject();
 * ```
 */
export type Transaction = {
  senderWalletId: Wallet["_id"] | Wallet;
  receiverWalletId?: Wallet["_id"] | Wallet;
  contractId: Contract["_id"] | Contract;
  transactionHash: string;
  amount: string;
  status: string;
  type: string;
  createdAt?: Date;
  updatedAt?: Date;
  _id: mongoose.Types.ObjectId;
};

/**
 * Lean version of TransactionDocument (type alias of `Transaction`)
 *
 * Use this type alias to avoid conflicts with model names:
 * ```
 * import { Transaction } from "../models"
 * import { TransactionObject } from "../interfaces/mongoose.gen.ts"
 *
 * const transactionObject: TransactionObject = transaction.toObject();
 * ```
 */
export type TransactionObject = Transaction;

/**
 * Mongoose Query type
 *
 * This type is returned from query functions. For most use cases, you should not need to use this type explicitly.
 */
export type TransactionQuery = mongoose.Query<
  any,
  TransactionDocument,
  TransactionQueries
> &
  TransactionQueries;

/**
 * Mongoose Query helper types
 *
 * This type represents `TransactionSchema.query`. For most use cases, you should not need to use this type explicitly.
 */
export type TransactionQueries = {};

export type TransactionMethods = {};

export type TransactionStatics = {};

/**
 * Mongoose Model type
 *
 * Pass this type to the Mongoose Model constructor:
 * ```
 * const Transaction = mongoose.model<TransactionDocument, TransactionModel>("Transaction", TransactionSchema);
 * ```
 */
export type TransactionModel = mongoose.Model<
  TransactionDocument,
  TransactionQueries
> &
  TransactionStatics;

/**
 * Mongoose Schema type
 *
 * Assign this type to new Transaction schema instances:
 * ```
 * const TransactionSchema: TransactionSchema = new mongoose.Schema({ ... })
 * ```
 */
export type TransactionSchema = mongoose.Schema<
  TransactionDocument,
  TransactionModel,
  TransactionMethods,
  TransactionQueries
>;

/**
 * Mongoose Document type
 *
 * Pass this type to the Mongoose Model constructor:
 * ```
 * const Transaction = mongoose.model<TransactionDocument, TransactionModel>("Transaction", TransactionSchema);
 * ```
 */
export type TransactionDocument = mongoose.Document<
  mongoose.Types.ObjectId,
  TransactionQueries
> &
  TransactionMethods & {
    senderWalletId: WalletDocument["_id"] | WalletDocument;
    receiverWalletId?: WalletDocument["_id"] | WalletDocument;
    contractId: ContractDocument["_id"] | ContractDocument;
    transactionHash: string;
    amount: string;
    status: string;
    type: string;
    createdAt?: Date;
    updatedAt?: Date;
    _id: mongoose.Types.ObjectId;
  };

/**
 * Lean version of UserDocument
 *
 * This has all Mongoose getters & functions removed. This type will be returned from `UserDocument.toObject()`. To avoid conflicts with model names, use the type alias `UserObject`.
 * ```
 * const userObject = user.toObject();
 * ```
 */
export type User = {
  firstName?: string;
  lastName?: string;
  username?: string;
  password: string;
  email?: string;
  phone?: string;
  profileImage?: string;
  coverImage?: string;
  address?: string;
  isActive?: boolean;
  bio?: string;
  followers: (User["_id"] | User)[];
  following: (User["_id"] | User)[];
  createdAt?: Date;
  updatedAt?: Date;
  _id: mongoose.Types.ObjectId;
};

/**
 * Lean version of UserDocument (type alias of `User`)
 *
 * Use this type alias to avoid conflicts with model names:
 * ```
 * import { User } from "../models"
 * import { UserObject } from "../interfaces/mongoose.gen.ts"
 *
 * const userObject: UserObject = user.toObject();
 * ```
 */
export type UserObject = User;

/**
 * Mongoose Query type
 *
 * This type is returned from query functions. For most use cases, you should not need to use this type explicitly.
 */
export type UserQuery = mongoose.Query<any, UserDocument, UserQueries> &
  UserQueries;

/**
 * Mongoose Query helper types
 *
 * This type represents `UserSchema.query`. For most use cases, you should not need to use this type explicitly.
 */
export type UserQueries = {};

export type UserMethods = {};

export type UserStatics = {};

/**
 * Mongoose Model type
 *
 * Pass this type to the Mongoose Model constructor:
 * ```
 * const User = mongoose.model<UserDocument, UserModel>("User", UserSchema);
 * ```
 */
export type UserModel = mongoose.Model<UserDocument, UserQueries> & UserStatics;

/**
 * Mongoose Schema type
 *
 * Assign this type to new User schema instances:
 * ```
 * const UserSchema: UserSchema = new mongoose.Schema({ ... })
 * ```
 */
export type UserSchema = mongoose.Schema<
  UserDocument,
  UserModel,
  UserMethods,
  UserQueries
>;

/**
 * Mongoose Document type
 *
 * Pass this type to the Mongoose Model constructor:
 * ```
 * const User = mongoose.model<UserDocument, UserModel>("User", UserSchema);
 * ```
 */
export type UserDocument = mongoose.Document<
  mongoose.Types.ObjectId,
  UserQueries
> &
  UserMethods & {
    firstName?: string;
    lastName?: string;
    username?: string;
    password: string;
    email?: string;
    phone?: string;
    profileImage?: string;
    coverImage?: string;
    address?: string;
    isActive?: boolean;
    bio?: string;
    followers: mongoose.Types.Array<UserDocument["_id"] | UserDocument>;
    following: mongoose.Types.Array<UserDocument["_id"] | UserDocument>;
    createdAt?: Date;
    updatedAt?: Date;
    _id: mongoose.Types.ObjectId;
  };

/**
 * Lean version of WalletDocument
 *
 * This has all Mongoose getters & functions removed. This type will be returned from `WalletDocument.toObject()`. To avoid conflicts with model names, use the type alias `WalletObject`.
 * ```
 * const walletObject = wallet.toObject();
 * ```
 */
export type Wallet = {
  userId: User["_id"] | User;
  address: string;
  privateKey: string;
  publicKey: string;
  mnemonic?: any;
  balance?: string;
  createdAt?: Date;
  updatedAt?: Date;
  _id: mongoose.Types.ObjectId;
};

/**
 * Lean version of WalletDocument (type alias of `Wallet`)
 *
 * Use this type alias to avoid conflicts with model names:
 * ```
 * import { Wallet } from "../models"
 * import { WalletObject } from "../interfaces/mongoose.gen.ts"
 *
 * const walletObject: WalletObject = wallet.toObject();
 * ```
 */
export type WalletObject = Wallet;

/**
 * Mongoose Query type
 *
 * This type is returned from query functions. For most use cases, you should not need to use this type explicitly.
 */
export type WalletQuery = mongoose.Query<any, WalletDocument, WalletQueries> &
  WalletQueries;

/**
 * Mongoose Query helper types
 *
 * This type represents `WalletSchema.query`. For most use cases, you should not need to use this type explicitly.
 */
export type WalletQueries = {};

export type WalletMethods = {};

export type WalletStatics = {};

/**
 * Mongoose Model type
 *
 * Pass this type to the Mongoose Model constructor:
 * ```
 * const Wallet = mongoose.model<WalletDocument, WalletModel>("Wallet", WalletSchema);
 * ```
 */
export type WalletModel = mongoose.Model<WalletDocument, WalletQueries> &
  WalletStatics;

/**
 * Mongoose Schema type
 *
 * Assign this type to new Wallet schema instances:
 * ```
 * const WalletSchema: WalletSchema = new mongoose.Schema({ ... })
 * ```
 */
export type WalletSchema = mongoose.Schema<
  WalletDocument,
  WalletModel,
  WalletMethods,
  WalletQueries
>;

/**
 * Mongoose Document type
 *
 * Pass this type to the Mongoose Model constructor:
 * ```
 * const Wallet = mongoose.model<WalletDocument, WalletModel>("Wallet", WalletSchema);
 * ```
 */
export type WalletDocument = mongoose.Document<
  mongoose.Types.ObjectId,
  WalletQueries
> &
  WalletMethods & {
    userId: UserDocument["_id"] | UserDocument;
    address: string;
    privateKey: string;
    publicKey: string;
    mnemonic?: any;
    balance?: string;
    createdAt?: Date;
    updatedAt?: Date;
    _id: mongoose.Types.ObjectId;
  };

/**
 * Check if a property on a document is populated:
 * ```
 * import { IsPopulated } from "../interfaces/mongoose.gen.ts"
 *
 * if (IsPopulated<UserDocument["bestFriend"]>) { ... }
 * ```
 */
export function IsPopulated<T>(doc: T | mongoose.Types.ObjectId): doc is T {
  return doc instanceof mongoose.Document;
}

/**
 * Helper type used by `PopulatedDocument`. Returns the parent property of a string
 * representing a nested property (i.e. `friend.user` -> `friend`)
 */
type ParentProperty<T> = T extends `${infer P}.${string}` ? P : never;

/**
 * Helper type used by `PopulatedDocument`. Returns the child property of a string
 * representing a nested property (i.e. `friend.user` -> `user`).
 */
type ChildProperty<T> = T extends `${string}.${infer C}` ? C : never;

/**
 * Helper type used by `PopulatedDocument`. Removes the `ObjectId` from the general union type generated
 * for ref documents (i.e. `mongoose.Types.ObjectId | UserDocument` -> `UserDocument`)
 */
type PopulatedProperty<Root, T extends keyof Root> = Omit<Root, T> & {
  [ref in T]: Root[T] extends mongoose.Types.Array<infer U>
    ? mongoose.Types.Array<Exclude<U, mongoose.Types.ObjectId>>
    : Exclude<Root[T], mongoose.Types.ObjectId>;
};

/**
 * Populate properties on a document type:
 * ```
 * import { PopulatedDocument } from "../interfaces/mongoose.gen.ts"
 *
 * function example(user: PopulatedDocument<UserDocument, "bestFriend">) {
 *   console.log(user.bestFriend._id) // typescript knows this is populated
 * }
 * ```
 */
export type PopulatedDocument<DocType, T> = T extends keyof DocType
  ? PopulatedProperty<DocType, T>
  : ParentProperty<T> extends keyof DocType
  ? Omit<DocType, ParentProperty<T>> & {
      [ref in ParentProperty<T>]: DocType[ParentProperty<T>] extends mongoose.Types.Array<
        infer U
      >
        ? mongoose.Types.Array<
            ChildProperty<T> extends keyof U
              ? PopulatedProperty<U, ChildProperty<T>>
              : PopulatedDocument<U, ChildProperty<T>>
          >
        : ChildProperty<T> extends keyof DocType[ParentProperty<T>]
        ? PopulatedProperty<DocType[ParentProperty<T>], ChildProperty<T>>
        : PopulatedDocument<DocType[ParentProperty<T>], ChildProperty<T>>;
    }
  : DocType;

/**
 * Helper types used by the populate overloads
 */
type Unarray<T> = T extends Array<infer U> ? U : T;
type Modify<T, R> = Omit<T, keyof R> & R;

/**
 * Augment mongoose with Query.populate overloads
 */
declare module "mongoose" {
  interface Query<ResultType, DocType, THelpers = {}> {
    populate<T extends string>(
      path: T,
      select?: string | any,
      model?: string | Model<any, THelpers>,
      match?: any
    ): Query<
      ResultType extends Array<DocType>
        ? Array<PopulatedDocument<Unarray<ResultType>, T>>
        : ResultType extends DocType
        ? PopulatedDocument<Unarray<ResultType>, T>
        : ResultType,
      DocType,
      THelpers
    > &
      THelpers;

    populate<T extends string>(
      options: Modify<PopulateOptions, { path: T }> | Array<PopulateOptions>
    ): Query<
      ResultType extends Array<DocType>
        ? Array<PopulatedDocument<Unarray<ResultType>, T>>
        : ResultType extends DocType
        ? PopulatedDocument<Unarray<ResultType>, T>
        : ResultType,
      DocType,
      THelpers
    > &
      THelpers;
  }
}
