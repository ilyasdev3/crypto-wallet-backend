type Query {
  getUser(id: ID!): User
  me: User
  getUserFollowing(id: ID!): [User]
  getUserFollowers(id: ID!): [User]
  getUserWithName(username: String!): getUserWithNameResponse
}

type getUserWithNameResponse {
  user: User
  message: String
}

type CreateUserResponse {
  # user: User
  message: String
  token: String
}

type LoginResponse {
  message: String
  token: String
}

type Mutation {
  createUser(user: UserInput!): CreateUserResponse
  loginUser(user: UserInput!): LoginResponse
  updateUser(user: UpdateUserInput!): String!
  checkUsername(username: String!): String
  deleteUser(id: ID!): String
  followUnfollowUser(userId: ID!): String
}

input UserInput {
  username: String!
  password: String!
  firstName: String
  lastName: String
  email: String
  phone: String
  profileImage: Upload
  address: String
  bio: String
}

scalar Upload

type User {
  id: ID!
  firstName: String
  lastName: String
  username: String!
  email: String
  phone: String
  profileImage: String
  address: String
  isVerified: Boolean
  bio: String
  followers: [ID]
  following: [ID]
  createdAt: Date
  updatedAt: Date
}

input UpdateUserInput {
  username: String
  password: String
  firstName: String
  lastName: String
  email: String
  phone: String
  profileImage: Upload
  address: String
  bio: String
}
